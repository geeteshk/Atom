<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw minimap

draw_set_colour(c_black);
draw_set_alpha(.4);
draw_circle(window_get_width() - 135, window_get_height() - 135, 115, false);
draw_set_alpha(1);
draw_circle(window_get_width() - 135, window_get_height() - 135, 115, true);

var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

draw_set_colour(c_teal);
draw_set_alpha(.8);
for (var yy = 0; yy &lt; height; yy++) {
    for (var xx = 0; xx &lt; width; xx++) {
        if (obj_level.grid[# xx, yy] == FLOOR) {
           draw_rectangle((window_get_width() - 250) + (xx * 5), (window_get_height() - 250) + (yy * 5), (window_get_width() - 250) + (xx * 5) + 5, (window_get_height() - 250) + (yy * 5) + 5, false);
        }
    }
}

draw_set_colour(c_lime);
draw_set_alpha(1);
draw_rectangle((window_get_width() - 250) + ((obj_player.x / room_width) * 230) - 3, (window_get_height() - 250) + ((obj_player.y / room_height) * 230) - 3, (window_get_width() - 250) + ((obj_player.x / room_width) * 230) - 1, (window_get_height() - 250) + ((obj_player.y / room_width) * 230) - 1, false);

draw_set_color(c_red);
for (var i = 0; i &lt; instance_number(obj_enemy_slime); i++) {
    var enemy = instance_find(obj_enemy_slime, i);
    draw_rectangle((window_get_width() - 250) + ((enemy.x / room_width) * 230) - 3, (window_get_height() - 250) + ((enemy.y / room_height) * 230) - 3, (window_get_width() - 250) + ((enemy.x / room_width) * 230) - 1, (window_get_height() - 250) + ((enemy.y / room_width) * 230) - 1, false);
}

draw_set_colour(c_orange);
draw_rectangle((window_get_width() - 250) + ((obj_door.x / room_width) * 230) - 3, (window_get_height() - 250) + ((obj_door.y / room_height) * 230), (window_get_width() - 250) + ((obj_door.x / room_width) * 230) - 1, (window_get_height() - 250) + ((obj_door.y / room_width) * 230) + 2, false);

draw_set_colour(c_maroon);
for (var i = 0; i &lt; instance_number(obj_slime_boss); i++) {
    var enemy = instance_find(obj_slime_boss, i);
    draw_rectangle((window_get_width() - 250) + ((enemy.x / room_width) * 230) - 3, (window_get_height() - 250) + ((enemy.y / room_height) * 230), (window_get_width() - 250) + ((enemy.x / room_width) * 230) - 2, (window_get_height() - 250) + ((enemy.y / room_width) * 230) + 1, false);
}

draw_set_color(c_white);
for (var i = 0; i &lt; instance_number(obj_puzzle); i++) {
    var enemy = instance_find(obj_puzzle, i);
    draw_rectangle((window_get_width() - 250) + ((enemy.x / room_width) * 230) - 3, (window_get_height() - 250) + ((enemy.y / room_height) * 230) - 3, (window_get_width() - 250) + ((enemy.x / room_width) * 230) - 1, (window_get_height() - 250) + ((enemy.y / room_width) * 230) - 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
